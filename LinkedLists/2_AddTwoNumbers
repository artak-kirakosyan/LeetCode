# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution(object):
    def addTwoNumbers(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
            
        carry = 0
        curr_node = None
        while l1 and l2:
            try:
                l1_val = l1.val
            except:
                l1_val = 0
            try:
                l2_val = l2.val
            except:
                l2_val = 0
            curr_val = carry + l1_val + l2_val
            if curr_val > 9:
                carry = 1
                curr_val = curr_val - 10
            else:
                carry = 0
            next_node = ListNode(val=curr_val)
            if not curr_node:
                curr_node = next_node
                first_node = curr_node
            else:
                curr_node.next = next_node
                curr_node = next_node
            count = 0
            if l1.next:
                l1 = l1.next
            else:
                l1 = ListNode()
                count += 1
            if l2.next:
                l2 = l2.next
            else:
                l2 = ListNode()
                count += 1
            if count > 1:
                break
                
        if carry:
            curr_node.next = ListNode(val=1)
        return first_node
            
            
